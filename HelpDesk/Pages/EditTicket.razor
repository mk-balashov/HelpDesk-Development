@using System.Security.Claims
@using HelpDesk.Data
@using Syncfusion.Blazor.DropDowns
@inherits OwningComponentBase<HelpDeskService>

<div>
    <SfDropDownList TItem="HelpDeskStatus" Enabled="!isReadOnly"
                    TValue="string" PopupHeight="230px" Index=0
                    Placeholder="Ticket Status"
                    DataSource="@HelpDeskStatus.Statuses"
                    FloatLabelType="@FloatLabelType.Always"
                    @bind-Value="@SelectedTicket.TicketStatus">
        <DropDownListFieldSettings Text="Text" Value="ID">
        </DropDownListFieldSettings>
    </SfDropDownList>
</div>
<div>
    <SfDatePicker ID="TicketDate" Enabled="!isReadOnly"
                  Placeholder="Ticket Date"
                  FloatLabelType="@FloatLabelType.Always"
                  @bind-Value="@SelectedTicket.TicketDate"
                  Max="DateTime.Now"
                  ShowClearButton="false">
    </SfDatePicker>
</div>
<div>
    <SfTextBox Enabled="!isReadOnly" Placeholder="Ticket Description"
               FloatLabelType="@FloatLabelType.Always"
               @bind-Value="@SelectedTicket.TicketDescription">
    </SfTextBox>
</div>
<div>
    <SfTextBox Enabled="!isReadOnly" Placeholder="Requester Email"
               FloatLabelType="@FloatLabelType.Always"
               @bind-Value="@SelectedTicket.TicketRequesterEmail">
    </SfTextBox>
</div>

@if (SelectedTicket.HelpDeskTicketDetails != null)
{
    @if (SelectedTicket.HelpDeskTicketDetails.Count() > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var TicketDetail in SelectedTicket.HelpDeskTicketDetails)
                {
                    <tr>
                        <td>@TicketDetail.TicketDetailDate.ToShortDateString()</td>
                        <td>@TicketDetail.TicketDescription</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <SfTextBox Placeholder="New Help Desk Ticket Detail"
               @bind-Value="@NewHelpDeskTicketDetail">
    </SfTextBox>
    <SfButton CssClass="e-small e-success" @onclick="async () => await AddHelpDeskTicketDetailAsync()">
        Add
    </SfButton>
}

<br />

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public HelpDeskTickets SelectedTicket { get; set; }
    public bool isReadOnly = true;
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    string NewHelpDeskTicketDetail = "";
    private Task previousOperation = Task.CompletedTask;

    protected override async Task OnInitializedAsync()
    {
        await EnsurePreviousOperationCompleted();

        // Get the current user.
        CurrentUser = (await authenticationStateTask).User;
        // If there is a logged in user
        // they are an administrator.
        // Enable editing.
        isReadOnly = !CurrentUser.Identity.IsAuthenticated;
    }

    private async Task AddHelpDeskTicketDetailAsync()
    {
        await EnsurePreviousOperationCompleted();

        // Create new HelpDeskTicketDetails record.
        var NewHelpDeskTicketDetails = new HelpDeskTicketDetails
            {
                HelpDeskTicketId = SelectedTicket.Id,
                TicketDetailDate = DateTime.Now,
                TicketDescription = NewHelpDeskTicketDetail
            };

        // Add to collection.
        SelectedTicket.HelpDeskTicketDetails.Add(NewHelpDeskTicketDetails);

        // Clear the Text Box.
        NewHelpDeskTicketDetail = "";
    }

    private async Task EnsurePreviousOperationCompleted()
    {
        if (!previousOperation.IsCompleted)
        {
            await previousOperation;
        }
        previousOperation = Task.CompletedTask;
    }
}
